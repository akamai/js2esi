/** * js implementation of ESI-only streamAuth token generation * note that this is not intended to be used - it is only here to provide * a "complex" js application... */// globalsconst ASCII_LOOKUP = 'X\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff';const OBFUSCATE_AK_LOOKUP = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';const BASE64URL_AK_LOOKUP = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._';const ASCII_BASE64URL_AK_LOOKUP = '??????????????????????????????????????????????.?0123456789???????ABCDEFGHIJKLMNOPQRSTUVWXYZ????_?abcdefghijklmnopqrstuvwxyz';function awchr(v) {    return substr(ASCII_BASE64URL_AK_LOOKUP, v, 1);}function chr(v) {    if (v <= 0)        return '\x00';    return substr(ASCII_LOOKUP, v, 1);}function weird64_decode(v) {    if (len(v) === 1)        return index(BASE64URL_AK_LOOKUP, v);    else if (len(v) < 1)        return 0;    return weird64_decode(substr(v, 0, 1)) + 64 * weird64_decode(substr(v, 1));}function int_authb64(v) {    if (v >= 64)        return int_authb64(v / 64) + int_authb64(v % 64);    else if (v < 26) return awchr(v + 97);    else if (v < 52) return awchr(v + 39);    else if (v < 62) return awchr(v - 4);    else if (v === 62) return '.';    else if (v === 63) return '_';    // TBD: throw exception...    return 'TBD:InternalError';}function md5oct_authb64(v) {    if (v < 64)        return 'a' + int_authb64(v);    return int_authb64(v);}function md5_authb64(v) {    return md5oct_authb64(v[0] & 255)        + md5oct_authb64(v[0] >> 8 & 255)        + md5oct_authb64(v[0] >> 16 & 255)        + md5oct_authb64(v[0] >> 24 & 255)        + md5oct_authb64(v[1] & 255)        + md5oct_authb64(v[1] >> 8 & 255)        + md5oct_authb64(v[1] >> 16 & 255)        + md5oct_authb64(v[1] >> 24 & 255)        + md5oct_authb64(v[2] & 255)        + md5oct_authb64(v[2] >> 8 & 255)        + md5oct_authb64(v[2] >> 16 & 255)        + md5oct_authb64(v[2] >> 24 & 255)        + md5oct_authb64(v[3] & 255)        + md5oct_authb64(v[3] >> 8 & 255)        + md5oct_authb64(v[3] >> 16 & 255)        + md5oct_authb64(v[3] >> 24 & 255);}function authb64(v) {    return int_authb64(int(v));}function md5_binary(v) {    return chr(v[0] & 255)        + chr(v[0] >> 8 & 255)        + chr(v[0] >> 16 & 255)        + chr(v[0] >> 24 & 255)        + chr(v[1] & 255)        + chr(v[1] >> 8 & 255)        + chr(v[1] >> 16 & 255)        + chr(v[1] >> 24 & 255)        + chr(v[2] & 255)        + chr(v[2] >> 8 & 255)        + chr(v[2] >> 16 & 255)        + chr(v[2] >> 24 & 255)        + chr(v[3] & 255)        + chr(v[3] >> 8 & 255)        + chr(v[3] >> 16 & 255)        + chr(v[3] >> 24 & 255);}function akamaiObfuscate(token, v) {    for (item of [0..31]) {        r[item_index] = weird64_decode(substr(token, item_index, 1)) % 10;    }    let ret = '';    for (item of [1..len(v)]) {        let idx = index(OBFUSCATE_AK_LOOKUP, substr(v, item_index, 1));        if (idx < 0) {            ret = ret + substr(v, item_index, 1);        }        else {            ret = ret + substr(OBFUSCATE_AK_LOOKUP, idx + r[item_index % 32] + 9, 1);        }    }    return ret;}function generateStreamAuthToken(authType, authProfile, authSecret, authWindow, authPath, authAnchor) {    if (authType !== 'd') {        // TBD: throw exception...        return 'unsupportedTokenType';    }    let tw = int_authb64(authAnchor) + '-' + int_authb64(authWindow);    let ascii = authPath + tw + authProfile + authSecret;    let md5dig = md5_authb64(digest_md5(md5_binary(digest_md5(ascii)) + authSecret));    let obfProfile = akamaiObfuscate(md5dig, '-' + authProfile);    let flags = 'aE';    return 'd' + flags + md5dig + '-' + tw + obfProfile;}